# -*- coding: utf-8 -*-
"""Projet Python Final INGE 2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1toTYwbi677IJ39MtQK29if6Mt-GvfQw6

## **Importation du dataset du CAC 40**
"""

# Projet : Exploration des techniques d'augmentation de donn√©es pour am√©liorer les pr√©dictions sur les march√©s financiers
# -*- coding: utf-8 -*-
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from statsmodels.tsa.stattools import adfuller
from statsmodels.tsa.seasonal import STL
from statsmodels.graphics.tsaplots import plot_acf, plot_pacf
import seaborn as sns
from scipy.signal import periodogram
import random

"""### 1. a) Chargement des donn√©es du dataset et nettoyage de ces **donn√©es**"""

cac40_df = pd.read_csv("/content/CAC40_stocks_2010_2021.csv")
cac40_df['Date'] = pd.to_datetime(cac40_df['Date'])
cac40_df.set_index('Date', inplace=True)
cac40_df = cac40_df.dropna()
print("Donn√©es charg√©es et nettoy√©es.")
# V√©rifier les noms d'entreprise disponibles
print(cac40_df['CompanyName'].unique())
print(cac40_df['StockName'].unique())  # pour voir tous les noms

"""### 1.b) S√©lection de 10 titres al√©atoires"""

tickers = cac40_df['StockName'].unique()
selected_tickers = random.sample(list(tickers), 10)
print(f"Selected tickers: {selected_tickers}")
log_returns = pd.DataFrame()

"""### 1.c) Stockage des r√©sultats"""

log_returns = pd.DataFrame()
for ticker in selected_tickers:
  sub_df = cac40_df[cac40_df['StockName'] == ticker].copy()
  sub_df.sort_index(inplace=True)
  sub_df['LogReturn'] = np.log(sub_df['Close']).diff()
log_returns[ticker] = sub_df['LogReturn']
print("Log-returns calcul√©s.")

log_returns = pd.DataFrame()

for ticker in selected_tickers:
    sub_df = cac40_df[cac40_df['StockName'] == ticker].copy()
    if sub_df.empty:
        print(f"‚ùå Pas de donn√©es pour {ticker}")
        continue
    sub_df.sort_index(inplace=True)
    sub_df['LogReturn'] = np.log(sub_df['Close']).diff()

    if sub_df['LogReturn'].dropna().empty:
        print(f"‚ö†Ô∏è Pas de log return exploitable pour {ticker}")
        continue

    log_returns[ticker] = sub_df['LogReturn']
    print(f"‚úÖ Log returns ajout√©s pour : {ticker}")

"""### 2.b) Test de Dickey-Fuller (stationnarit√©) ADF"""

print("\nüìä Test de Dickey-Fuller (stationnarit√©) corrig√© :")

# On v√©rifie que le ticker est bien dans log_returns et qu‚Äôil a des valeurs exploitables
for ticker in selected_tickers:
    if ticker in log_returns.columns:
        series = log_returns[ticker].dropna()
        if not series.empty:
            result = adfuller(series)
            print(f"‚úÖ {ticker} - p-value : {result[1]:.4f}")
        else:
            print(f"‚ö†Ô∏è {ticker} - S√©rie vide apr√®s nettoyage.")
    else:
        print(f"‚ùå {ticker} - Donn√©es absentes dans log_returns.")

adf_test = adfuller(returns)
print(f"ADF Statistic: {adf_test[0]}")
print(f"p-value: {adf_test[1]}")

"""### 3. Visualisation ACF et PACF"""

print("\n Visualisation ACF et PACF pour le premier ticker:")
example_ticker = selected_tickers[0]
series = log_returns[example_ticker].dropna()
fig, ax = plt.subplots(3, 1, figsize=(12, 10))
cac40_df[cac40_df['StockName'] == example_ticker]['Close'].plot(ax=ax[0])
ax[0].set_title(f'{example_ticker} - Prix')
plot_acf(series, ax=ax[1], lags=30)
plot_pacf(series, ax=ax[2], lags=30)
ax[1].set_title("Autocorr√©lation")
ax[2].set_title("Autocorr√©lation partielle")
plt.tight_layout()
plt.show()

"""### 3.D√©composition STL"""

print("\n D√©composition STL du log-return (composantes tendance/saisonnalit√©/bruit):")
stl = STL(series, period=30)
res = stl.fit()
res.plot()
plt.suptitle(f"{example_ticker} - STL Decomposition")
plt.tight_layout()
plt.show()

"""### 4.Analyse spectrale"""

print("\n Analyse spectrale (Periodogram):")
f, Pxx = periodogram(series)
plt.figure(figsize=(10, 4))
plt.plot(f, Pxx)
plt.title(f"{example_ticker} - Periodogram")
plt.xlabel("Fr√©quence")
plt.ylabel("Puissance")
plt.tight_layout()
plt.show()

"""### 6.Heatmap de corr√©lations crois√©es"""

print("\n Heatmap des corr√©lations entre les log-returns :")
corr_matrix = log_returns.corr()
print(corr_matrix)
plt.figure(figsize=(10, 8))
sns.heatmap(corr_matrix, annot=True, cmap="coolwarm")
plt.title("Corr√©lations des log-returns (10 titres al√©atoires)")
plt.tight_layout()
plt.show()

"""## **Partie 2 : Exploration des donn√©es financi√®res (CAC 40, S&P 500)**

### 1. Chargement et nettoyage des donn√©es
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import random

# Chargement des donn√©es
cac40_df = pd.read_csv("/content/CAC40_stocks_2010_2021 (1).csv")
sp500_df = pd.read_csv("HistoricalData_1745224016092.csv")

# Formatage des dates
cac40_df['Date'] = pd.to_datetime(cac40_df['Date'])
sp500_df['Date'] = pd.to_datetime(sp500_df['Date'], format='%m/%d/%Y')

# Renommage des colonnes pour uniformit√©
sp500_df.rename(columns={
    "Cl√¥ture/Dernier": "Close",
    "Ouvert": "Open",
    "Haut": "High",
    "Bas": "Low"
}, inplace=True)

# Trier par date
cac40_df.sort_values(by='Date', inplace=True)
sp500_df.sort_values(by='Date', inplace=True)

print(cac40_df.head())
print(sp500_df.head())

"""### 2. S√©lection al√©atoire de 10 titres du CAC 40"""

# S√©lection al√©atoire de 10 titres CAC40
random.seed(42)
selected_stocks = random.sample(list(cac40_df['StockName'].unique()), 10)
cac40_sample_df = cac40_df[cac40_df['StockName'].isin(selected_stocks)].copy()

print(f"S√©lection al√©atoire : {selected_stocks}")

"""### 3. Pr√©-traitement (Log-returns & Diff√©renciation)"""

# CAC40: Log-returns et diff√©rences
cac40_sample_df['LogReturn'] = cac40_sample_df.groupby('StockName')['Close'].transform(lambda x: np.log(x / x.shift(1)))
cac40_sample_df['Diff'] = cac40_sample_df.groupby('StockName')['Close'].diff()

# S&P500: Log-returns et diff√©rences
sp500_df['LogReturn'] = np.log(sp500_df['Close'] / sp500_df['Close'].shift(1))
sp500_df['Diff'] = sp500_df['Close'].diff()

print(cac40_sample_df.head())
print(sp500_df.head())

"""### 4. Calcul des indicateurs techniques (RSI, MACD, Bollinger Bands)"""

# RSI manuel
def RSI(series, period=14):
    delta = series.diff()
    up = delta.clip(lower=0)
    down = -1 * delta.clip(upper=0)
    ma_up = up.rolling(period).mean()
    ma_down = down.rolling(period).mean()
    rsi = 100 - (100 / (1 + ma_up / ma_down))
    return rsi

# Moyennes mobiles (SMA/EMA)
def SMA(series, period):
    return series.rolling(window=period).mean()

def EMA(series, period):
    return series.ewm(span=period, adjust=False).mean()

# Bollinger Bands manuel
def BollingerBands(series, period=20):
    sma = SMA(series, period)
    std = series.rolling(window=period).std()
    upper_band = sma + (std * 2)
    lower_band = sma - (std * 2)
    return upper_band, lower_band

# Appliquer sur exemple CAC40
ticker_example = selected_stocks[0]
ticker_df = cac40_sample_df[cac40_sample_df['StockName'] == ticker_example]

ticker_df['RSI'] = RSI(ticker_df['Close'])
ticker_df['SMA_20'] = SMA(ticker_df['Close'], 20)
ticker_df['EMA_20'] = EMA(ticker_df['Close'], 20)
ticker_df['BB_upper'], ticker_df['BB_lower'] = BollingerBands(ticker_df['Close'])

print(ticker_df[['Date','Close','RSI','SMA_20','EMA_20','BB_upper','BB_lower']].tail())

"""###  5. Volatilit√© implicite (Rolling Std)"""

ticker_df['Volatility'] = ticker_df['LogReturn'].rolling(window=20).std() * np.sqrt(252)

print(ticker_df[['Date', 'Close', 'Volatility']].tail())

"""### 6. Visualisation des s√©ries financi√®res

### *Prix de cl√¥ture CAC40*
"""

plt.figure(figsize=(12,6))
plt.plot(ticker_df['Date'], ticker_df['Close'], label=f'Prix de cl√¥ture - {ticker_example}')
plt.title(f"Prix de cl√¥ture - {ticker_example}")
plt.xlabel('Date')
plt.ylabel('Prix')
plt.legend()
plt.grid()
plt.show()

"""### *RSI & Bollinger Bands*"""

plt.figure(figsize=(12,6))
plt.plot(ticker_df['Date'], ticker_df['Close'], label='Prix')
plt.plot(ticker_df['Date'], ticker_df['SMA_20'], label='SMA 20', color='orange')
plt.plot(ticker_df['Date'], ticker_df['BB_upper'], label='Bollinger Band Haut', color='green')
plt.plot(ticker_df['Date'], ticker_df['BB_lower'], label='Bollinger Band Bas', color='red')
plt.fill_between(ticker_df['Date'], ticker_df['BB_lower'], ticker_df['BB_upper'], color='grey', alpha=0.1)
plt.title(f"Bollinger Bands - {ticker_example}")
plt.xlabel('Date')
plt.ylabel('Prix')
plt.legend()
plt.grid()
plt.show()

"""### 7. D√©tection et visualisation d'anomalies"""

# Visualisation Log-returns CAC40 pour d√©tection anomalies
plt.figure(figsize=(12,6))
plt.plot(ticker_df['Date'], ticker_df['LogReturn'], color='purple', label='Log-Returns')
plt.axhline(y=0, color='black', linestyle='--')
plt.title(f"Log-returns journaliers - D√©tection d'anomalies ({ticker_example})")
plt.xlabel('Date')
plt.ylabel('Log-return')
plt.legend()
plt.grid()
plt.show()